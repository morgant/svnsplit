#!/usr/bin/env bash

# 
# svnsplit - Split subversion repositories
# 
# CHANGE LOG:
# 
# v0.1   - 2019-03-16 - Morgan Aldridge <morgant@makkintosshu.com>
#                       Initial version
# v0.1.1 - 2020-09-12 - Morgan Aldridge
#                       Fix for skipped revision matches for includes/excludes.
# 
# LICENSE:
# 
# Copyright (c) 2019, Morgan T. Aldridge. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
# 
# - Redistributions of source code must retain the above copyright notice, this 
#   list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in the documentation 
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

# info
tool=$(basename "$0")
version='0.1.1'
copyright='(c) 2019-2020 Morgan T. Aldridge'

# environment variables

# global variables
argv=()
argc=0
verbose=false
dump=false
in_repo=""
out_repo=""
command=""
inclusion_globs=()
exclusion_globs=()
inclusions=()
exclusions=()

# print usage instructions (help)
function usage() {
	echo "Usage: $tool [options] <command> [<args>]"
	echo
	echo 'Options:'
	echo '  -d, --dump            : produce dump file instead of repository'
	echo '  -h, --help            : print these usage instructions'
	echo '  -i, --input           : input svn repo URI
	echo '  -o, --output          : output svn repo name
	echo '  -v, --verbose         : verbose output'
	echo '  -V, --version         : print the version'
	echo
	echo 'Commands:'
	echo '  include [paths]       : paths to include in output repo
	echo '  exclude [paths]       : paths to exclude from output repo
}

# print version info
function version() {
	echo "$tool v$version $copyright"
}

# preprocess arguments and convert combined & long options to individual options
function args_preprocess() {
  # do nothing if we have no arguments to process
  if [ $# -eq 0 ]; then return 0; fi
  
	# step through all arguments and pre-process them (we do this so we can 
	# support multiple options specified together, e.g.: -abc vs. -a -b -c),
	# GNU-style long options with alternate style values, and for easier
	# actual handling
	while [ $# -gt 0 ]; do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${1:0:1}" = "-" ]; then
			# is it a GNU-style long option (e.g. starts with a double-dash)?
			if [ "${1:0:2}" = "--" ]; then
				# push the option (everything before an equals) onto argv
				argv=("${argv[@]}" "${1%%=*}")
				
				# is it the alternate "--long-opt=value" format? if so, make it
				# "--long-opt value" format buy pushing the value (everything after the
				# equals) on as a separate argument
				case "$1" in *=*)
					argv=("${argv[@]}" "${1##*=}") ;;
				esac
			# otherwise, is it multiple single options specified together?
			elif [ ${#1} -gt 2 ]; then
				tmp="$1"
				# push each onto argv as single options
				for (( i=1; i < ${#tmp}; i++ )); do
					argv=("${argv[@]}" "-${tmp:$i:1}")
				done
			# otherwise, it must be a single option so just push it onto argv
			else
				argv=("${argv[@]}" "$1")
			fi
			shift
		# arguments just get pushed onto argv in order too
		else
			argv=("${argv[@]}" "$1")
			shift
		fi
	done
	argc=${#argv[@]}
}

function in_array() {
  local found=false
  local value="$1"
  shift

  if [ -z "$value" ]; then $found; fi
  if [ ${#@} -lt 1 ]; then $found; fi
  for array_value in "$@"; do
    if [ "$value" = "$array_value" ]; then found=true; fi
  done

  $found
}

function repo_split() {
  local success=true

  # do a quick check to verify the svn repo URI is valid
  local local_repo=""
  if ! svn list "${in_repo}" >/dev/null 2>&1; then
    success=false
    echo "ERROR! Unable to access '${in_repo}' svn repo!"
    exit 1
  # require a local repo, for now
  elif [[ "${in_repo}" =~ ^file://(.+)$ ]]; then
    local_repo="${BASH_REMATCH[1]}"
  else
    success=false
    echo "ERROR! Unable to resolve local path for '${in_repo}' svn repo!"
    exit 1
  fi

  # determine the current revision in the repo
  local revision="$(svn info "${in_repo}" | grep Revision | awk '{print $2}')"

  # find matching subversion paths to be included
  if [ "${#inclusion_globs[@]}" -gt 0 ]; then
    if $verbose; then echo "Including paths from '${in_repo}' svn repo:"; fi
    for inclusion in "${inclusion_globs[@]}"; do
      # check every revision for matching paths
      for (( i=0; i<$revision; i++ )); do
        local inclusion_path="$(dirname "${inclusion}")"
        while IFS= read -r line; do
          # build svn path and strip trailing slashes
          local svn_path="${inclusion_path}/${line}"
          svn_path="${svn_path%/}"
          if [[ "${svn_path}" =~ ^\./(.*)$ ]]; then svn_path="${BASH_REMATCH[1]}"; fi

          #echo "'${svn_path}' = ${inclusion} ?"
          if [[ "${svn_path}" = $inclusion ]] && ! in_array "${svn_path}" "${inclusions[@]}"; then
            inclusions+=("${svn_path}")
            if $verbose; then echo "${svn_path}"; fi
          fi
        done <<< "$(svn -r "${i}" list "${in_repo}/${inclusion_path}" 2>/dev/null)"
      done
    done
  fi

  # find matching subversion paths to be excluded
  if [ "${#exclusion_globs[@]}" -gt 0 ]; then
    if $verbose; then echo "Excluding paths from '${in_repo}' svn repo:"; fi
    for exclusion in "${exclusion_globs[@]}"; do
      # check every revision for matching paths
      for (( i=0; i<$revision; i++ )); do
        local exclusion_path="$(dirname "${exclusion}")"
        while IFS= read -r line; do
          # build svn path and strip trailing slashes
          local svn_path="${exclusion_path}/${line}"
          svn_path="${svn_path%/}"
          if [[ "${svn_path}" =~ ^\./(.*)$ ]]; then svn_path="${BASH_REMATCH[1]}"; fi

          #echo "'${svn_path}' = ${exclusion} ?"
          if [[ "${svn_path}" = $exclusion ]] && ! in_array "${svn_path}" "${exclusions[@]}"; then
            exclusions+=("${svn_path}")
            if $verbose; then echo "${svn_path}"; fi
          fi
        done <<< "$(svn list "${in_repo}/${exclusion_path}" 2>/dev/null)"
      done
    done
  fi

  # create a temp directory
  if $verbose; then echo "Creating temp directory..."; fi
  local temp_dir="$(mktemp -d -t "${tool}")"

  # create an svn dump to filter
  if $success; then
    local dump_file="${temp_dir}/$(basename "${local_repo}").svndump"
    if $verbose; then echo "Dumping '${local_repo}' svn repo to '${dump_file}' for filtering..."; fi
    if ! svnadmin dump "${local_repo}" > "${dump_file}"; then
      success=false
      echo "ERROR! An unknown error occurred while dumping subversion repo!"
    fi
  fi

  # build svndumpfilter command for inclusions
  local inclusions_filtered_file
  if $success && [ "${#inclusions[@]}" -gt 0 ]; then
    local filter_cmd=("svndumpfilter" "--drop-empty-revs" "--renumber-revs")
    filter_cmd+=("include")
    for inclusion in "${inclusions[@]}"; do
      filter_cmd+=("${inclusion}")
    done

    # filter svn dump for inclusions
    inclusions_filtered_file="${temp_dir}/$(basename "${local_repo}").filtered.inclusions.svndump"
    if $verbose; then echo "Filtering '${dump_file}' with inclusions..."; fi
    if ! "${filter_cmd[@]}" < "${dump_file}" > "${inclusions_filtered_file}"; then
      success=false
      echo "ERROR! An unknown error occurred while filtering the subversion dump file with inclusions!"
    fi
  # just use the dump file for the post-inclusions-filtered file if there were no inclusions
  elif [ "${#inclusions[@]}" -lt 1 ]; then
    inclusions_filtered_file="${dump_file}"
  fi

  # build svndumpfilter command for exclusions
  local exclusions_filtered_file
  if [ "${#exclusions[@]}" -gt 0 ]; then
    local filter_cmd=("svndumpfilter" "--drop-empty-revs" "--renumber-revs")
    filter_cmd+=("exclude")
    for exclusion in "${exclusions[@]}"; do
      filter_cmd+=("${exclusion}")
    done

    # filter svn dump for exclusions
    exclusions_filtered_file="${temp_dir}/$(basename "${local_repo}").filtered.exclusions.svndump"
    if $verbose; then echo "Filtering '${inclusions_filtered_file}' with exclusions..."; fi
    if ! "${filter_cmd[@]}" < "${inclusions_filtered_file}" > "${exclusions_filtered_file}"; then
      success=false
      echo "ERROR! An unknown error occurred while filtering the subversion dump file with exclusions!"
    fi
  # just use the post-inclusions-filtered file for the post-exclusions-filtered file if there were no exclusions
  # (which may or may not be just the dump file, if there were no inclusions)
  elif [ "${#exclusions[@]}" -lt 1 ]; then
    exclusions_filtered_file="${inclusions_filtered_file}"
  fi

  # create the final repository
  if [ -z "${out_repo}" ]; then
    success=false
    echo "ERROR! No name provided for new output svn repo!"
    exit 1
  # produce a filtered dump file
  elif $success && $dump; then
    if $verbose; then echo "Creating filtered svn dump file '${out_repo}' instead of new svn repo..."; fi
    if ! cp "${exclusions_filtered_file}" "${out_repo}"; then
      success=false
      echo "ERROR! An unknown error occurred creating new '${out_repo}' dump file!"
    fi
  # produce a new repo
  elif $success; then
    if $verbose; then echo "Creating new '${out_repo}' svn repo..."; fi
    if ! svnadmin create "${out_repo}"; then
      success=false
      echo "ERROR! An unknown error occurred creating new '${out_repo}' svn repo!"
    else
      if $verbose; then echo "Importing '${exclusions_filtered_file}' filtered subversion dump file..."; fi
      if ! svnadmin load "${out_repo}" < "${exclusions_filtered_file}"; then
        success=false
        echo "ERROR! An unknown error occurred loading filtered subversion dump file into new svn repo!"
      fi
    fi
  fi

  # summary

  # clean up the temp directory
  if $verbose; then echo "Cleaning up temp directory '${temp_dir}'..."; fi
  if ! rm -rf "${temp_dir}"; then
    echo "ERROR! An unknown error occurred while cleaning up temp directory!"
  fi

  $success
}

function main() {
  # require at least one option or argument
  if [ $argc -eq 0 ]; then
    echo "No options or arguments were specified!"
    echo
    usage
    exit 1
  fi
  
	# handle arguments
	local command repository
	for (( i=0; i<$argc; i++ )); do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${argv[$i]:0:1}" = "-" ]; then
			case "${argv[$i]}" in
			  # see if the user intended us to run in verbose mode
				"-v" | "--verbose")
					verbose=true
					;;
				# see if the user requested help
				"-h" | "--help")
					usage
					exit
					;;
				# output dump file instead of repository
				"-d" | "--dump")
				  dump=true
				  ;;
				# input repo URI
				"-i" | "--input")
				  in_repo="${argv[$i+1]}"
			    (( i++ ))
				  ;;
				# output repo name
				"-o" | "--output")
				  out_repo="${argv[$i+1]}"
			    (( i++ ))
				  ;;
				# see if the user requested the version
				"-V" | "--version")
					version
					exit
					;;
				# handle other options
			
			
				# unknown option
				*)
					echo "$tool: Unknown option '${argv[$i]}''!"
					exit 1
					;;
			esac
		# handle arguments
		else
			case "${argv[$i]}" in
			  # commands
			  "include" | "exclude")
			    command="${argv[$i]}"
			    ;;
			  # other non-command input (inclusions & exclusions)
				*)
				  case "${command}" in
				    "include")
				      inclusion_globs+=("${argv[$i]}")
				      ;;
				    "exclude")
				      exclusion_globs+=("${argv[$i]}")
				      ;;
				    *)
				      # unknown command/argument
				      echo "$tool: Unknown command '${argv[$i]}'!"
					    exit 1
					    ;;
					esac
					;;
			esac
		fi
	done
	
	if [ -z "$in_repo" ]; then
	  echo "$tool: missing input svn repo URI!"
	  exit 1
	fi
	if [ -z "$out_repo" ]; then
	  echo "$tool: missing output svn repo name!"
	  exit 1
	fi
	
	repo_split
}

args_preprocess "$@"
main
